// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "gitlab.ozon.dev/Vanek623/task-manager-system/external/task/models"
)

// MockiTaskStorage is a mock of iTaskStorage interface.
type MockiTaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockiTaskStorageMockRecorder
}

// MockiTaskStorageMockRecorder is the mock recorder for MockiTaskStorage.
type MockiTaskStorageMockRecorder struct {
	mock *MockiTaskStorage
}

// NewMockiTaskStorage creates a new mock instance.
func NewMockiTaskStorage(ctrl *gomock.Controller) *MockiTaskStorage {
	mock := &MockiTaskStorage{ctrl: ctrl}
	mock.recorder = &MockiTaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiTaskStorage) EXPECT() *MockiTaskStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockiTaskStorage) Add(ctx context.Context, t *models.Task) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, t)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockiTaskStorageMockRecorder) Add(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockiTaskStorage)(nil).Add), ctx, t)
}

// Delete mocks base method.
func (m *MockiTaskStorage) Delete(ctx context.Context, ID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockiTaskStorageMockRecorder) Delete(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockiTaskStorage)(nil).Delete), ctx, ID)
}

// Get mocks base method.
func (m *MockiTaskStorage) Get(ctx context.Context, ID *uuid.UUID) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockiTaskStorageMockRecorder) Get(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockiTaskStorage)(nil).Get), ctx, ID)
}

// List mocks base method.
func (m *MockiTaskStorage) List(ctx context.Context, limit, offset uint64) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockiTaskStorageMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockiTaskStorage)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockiTaskStorage) Update(ctx context.Context, t *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockiTaskStorageMockRecorder) Update(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockiTaskStorage)(nil).Update), ctx, t)
}
